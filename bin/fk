#! /usr/bin/env python3

import argparse
import os
import re
import subprocess
import sys

from collections import namedtuple
from pathlib import Path
from pprint import *

Env = namedtuple(
    'Env',
    (
        'name', 'description',
        'address_model', 'concurrency_model', 'execution_model', 'thread_model',
        'definitions', 'primitives', 'compiled_words', 'library_words'
    )
)

GenParams = namedtuple(
    'GenParams',
    (
        'address_model', 'concurrency_model', 'execution_model', 'thread_model',
        'definitions', 'primitives', 'compiled_words', 'library_words',
        'base_name', 'target_dir'
    )
)

BuildParams = namedtuple('BuildParams', ('todo'))

Primitive = namedtuple('Primitive', ('word_name', 'is_immediate', 'label', 'block_comment', 'body'))

Primitives = namedtuple('Primitives', ('count', 'decls', 'impls', 'registry', 'word_defs', 'cw_decls'))

CompiledWord = namedtuple('CompiledWord', ('word_name', 'is_immediate', 'label', 'block_comment', 'body'))

CompiledWords = namedtuple('CompiledWords', ('count', 'registry', 'word_defs', 'cw_decls'))

LibraryWords = namedtuple('LibraryWords', ('count', 'word_defs'))

ErrorData = namedtuple('ErrorData', ('id', 'symbol', 'desc'))

templates = Path(__file__).parent / '../src/templates'

address_models = templates / 'address_models'
concurrency    = templates / 'concurrency'
execution      = templates / 'execution'
threading      = templates / 'threading'

def main():

    env = get_env()

    parser = create_parser()
    args = parser.parse_args()

    # Look for cmd_* functions below to see what values args.command
    # can have.
    args.command(args, env)

def get_env():

    name              = os.environ.get('NAME', 'Forthkit FORTH')
    description       = os.environ.get('DESCRIPTION', '')

    address_model     = parse_address_model(os.environ.get('ADDRESS_MODEL', 'host'))
    concurrency_model = parse_concurrency_model(os.environ.get('CONCURRENCY_MODEL', 'single'))
    execution_model   = parse_execution_model(os.environ.get('EXECUTION_MODEL', 'switch'))
    thread_model      = parse_thread_model(os.environ.get('THREAD_MODEL', 'indirect'))

    definitions       = parse_definitions(os.environ.get('DEFINITIONS', ''))
    primitives        = parse_primitives(os.environ.get('PRIMITIVES', ''))
    compiled_words    = parse_compiled_words(os.environ.get('COMPILED_WORDS', ''))
    library_words     = parse_library_words(os.environ.get('LIBRARY_WORDS', ''))

    target_dir        = os.environ.get('TARGET_DIR', './')
    base_name         = os.environ.get('BASE_NAME', 'evaluator')

    return Env(
        name, description,
        address_model, concurrency_model, execution_model, thread_model,
        definitions, primitives, compiled_words, library_words
    )

class InvalidConfigValue(Exception):

    def __init__(self, env_name, choices, value):
        self.env_name = env_name
        self.choices = choices
        self.values = values

    def __str__(self):

        choices = ', '.join(f'"{c}"' for c in choices)

        return (
            f'InvalidConfigValue: {self.env_name} '
            f'expects one of ({choices}): '
            f'received: "{choices}"'
        )

def parse_address_model(s):

    try:
        return std_address_model[s.lower()]

    except:
        raise InvalidConfigValue('ADDRESS_MODEL', ('host', 'virtual'), s)

def parse_concurrency_model(s):

    try:
        return std_concurrency_model[s.lower()]

    except:
        raise InvalidConfigValue('CONCURRENCY_MODEL', ('single', 'fibered'), s)

def parse_execution_model(s):

    try:
        return std_execution_model[s.lower()]

    except:
        raise InvalidConfigValue(
            'EXECUTION_MODEL', ('computed-goto', 'local-subroutine', 'switch'), s)

def parse_thread_model(s):

    try:
        return std_thread_model[s.lower()]

    except:
        raise InvalidConfigValue('THREAD_MODEL', ('direct', 'indirect'), s)

def parse_definitions(s):

    return [part.strip() for part in re.split(r'\s+', s) if part]

def parse_primitives(s):

    return [part.strip() for part in re.split(r'\s+', s) if part]

def parse_compiled_words(s):

    return [part.strip() for part in re.split(r'\s+', s) if part]

def parse_library_words(s):

    return [part.strip() for part in re.split(r'\s+', s) if part]

def create_parser():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers()

    init_parser = subparsers.add_parser('init', help='initialize forthkit project')
    init_parser.set_defaults(command='init')

    gen_parser = subparsers.add_parser('gen', help='generate source files')
    gen_parser.set_defaults(command=cmd_generate)

    gen_parser.add_argument('-a', '--address-model',
                            choices=('h', 'v', 'host', 'virtual'))

    gen_parser.add_argument('-c', '--concurrency_model',
                            choices=('f', 's', 'fibered', 'single'))

    gen_parser.add_argument('-e', '--execution-model',
                            choices=('g', 'l', 's', 'computed-goto', 'local-subroutine', 'switch'))

    gen_parser.add_argument('-t', '--thread-model',
                            choices=('d', 'i', 'direct', 'indirect'))

    gen_parser.add_argument('-N', '--base-name', default='evaluator')
    gen_parser.add_argument('-T', '--target-dir', default='./')
    gen_parser.add_argument('-d', '--definitions', nargs='*', default=[])
    gen_parser.add_argument('-p', '--primitives', nargs='*', default=[])
    gen_parser.add_argument('-w', '--compiled-words', nargs='*', default=[])
    gen_parser.add_argument('-l', '--library-words', nargs='*', default=[])

    build_parser = subparsers.add_parser('build', help='build source files')
    build_parser.set_defaults(command=cmd_build)

    build_parser.add_argument('-b', '--bootstrap', default=False,
                              type=parse_boolean_option)

    build_parser.add_argument('-c', '--cell-type', default='int',
                              choices=('short', 'int', 'long long'))

    build_parser.add_argument('-d', '--double-type', default='long long',
                              choices=('int', 'long long', '__int128'))

    build_parser.add_argument('-N', '--base-name', default='evaluator')

    build_parser.add_argument('-f', '--cflags')
    build_parser.add_argument('-l', '--ldflags')

    build_parser.add_argument('-S', '--source-dir', default='./')
    build_parser.add_argument('-T', '--target-dir', default='./')

    run_parser = subparsers.add_parser('run', help='run an interpreter')
    run_parser.set_defaults(command='run')

    return parser

boolean_option_value_re = (
    '(?P<true>(y(es)?)|(t(rue)?)|1)'
    '|'
    '(?P<false>(no?)|(f(alse)?)|0)'
)

def parse_boolean_option(s):

    m = re.fullmatch(boolean_option_value_re, s.lower())

    if not m:
        raise argparse.ArgumentError(f'invalid boolean value: "{s}"')

    return m.group('true') is not None


std_address_model = {
    'h':       'host',
    'host':    'host',
    'v':       'virtual',
    'virtual': 'virtual',
}

std_concurrency_model = {
    'f':       'fibered',
    'fibered': 'fibered',
    's':       'single',
    'single':  'single'
}

std_execution_model = {
    'g':                'computed-goto',
    'computed-goto':    'computed-goto',
    'computed-goto':    'computed-goto',
    'l':                'local-subroutine',
    'local-subroutine': 'local-subroutine',
    'local-subroutine': 'local-subroutine',
    's':                'switch',
    'switch':           'switch',
}

std_thread_model = {
    'd':        'direct',
    'direct':   'direct',
    'i':        'indirect',
    'indirect': 'indirect',
}

def cmd_generate(args, env):

    print(args)
    print(env)
    params = coalesce_generate_params(args, env)
    print(params)

    concurrency_model = params.concurrency_model
    execution_model   = params.execution_model
    address_model     = params.address_model
    thread_model      = params.thread_model

    additional_defs = process_definitions(params.definitions)
    primitives      = process_primitives(params.primitives, execution_model, thread_model)
    compiled_words  = process_compiled_words(params.compiled_words)
    library_words   = process_library_words(params.library_words)

    evaluator_h_tmpl = read(templates / 'evaluator.h')
    evaluator_c_tmpl = read(templates / 'evaluator.c')

    error_data = load_error_data()
    error_code_defs_h = error_code_definitions(error_data)
    error_descs_c = error_descriptors(error_data)

    define_enter_h        = read(threading / thread_model / 'define_enter.h')
    word_structure_h      = read(threading / thread_model / 'word_structure.h')

    evaluator_decls_h     = read(concurrency / concurrency_model / 'evaluator_decls.h')

    address_model_h       = read((address_models / address_model).with_suffix('.h'))

    declare_init_evaluator_h = read(concurrency / concurrency_model / 'declare_init_evaluator.h')

    execution_model_decls = try_read(execution / execution_model / 'decls.h')

    cw_decls_h = '\n'.join([primitives.cw_decls, compiled_words.cw_decls])

    h_values = {
        'additional_definitions': additional_defs,
        'address_model': address_model_h,
        'compiled_word_decls': cw_decls_h,
        'declare_init_evaluator': declare_init_evaluator_h,
        'define_enter': define_enter_h,
        'error_code_definitions': error_code_defs_h,
        'evaluator_decls': evaluator_decls_h,
        'execution_model_decls': execution_model_decls,
        'word_structure': word_structure_h,
    }

    thread_step_c         = read(threading / thread_model / 'execution' / execution_model / 'thread_step.c')

    begin_bootstrap_c     = read(concurrency / concurrency_model / 'begin_bootstrap.c')
    finish_bootstrap_c    = read(concurrency / concurrency_model / 'finish_bootstrap.c')
    evaluator_core_c      = read(concurrency / concurrency_model / 'execution' / execution_model / 'evaluator_core.c')
    init_evaluator_c      = read(concurrency / concurrency_model / 'init_evaluator.c')
    prepare_evaluation_c  = read(concurrency / concurrency_model / 'prepare_evaluation.c')

    declare_primitives_c  = try_read(execution / execution_model / 'declare_primitives.c')

    evaluator_variables_c  = (
        try_read(concurrency / concurrency_model / 'evaluator_variables.c') +
        try_read(execution / execution_model / 'evaluator_variables.c') +
        try_read(threading / thread_model / 'evaluator_variables.c')
    )

    c_values = {
        'begin_bootstrap': begin_bootstrap_c,
        'compiled_word_definitions': compiled_words.word_defs,
        'declare_primitives': declare_primitives_c,
        'error_descriptors': error_descs_c,
        'evaluator_core': evaluator_core_c,
        'evaluator_variables': evaluator_variables_c,
        'finish_bootstrap': finish_bootstrap_c,
        'init_evaluator': init_evaluator_c,
        'initialize_primitive_registry': primitives.registry,
        'library_word_count': str(library_words.count),
        'library_word_definitions': library_words.word_defs,
        'prepare_evaluation': prepare_evaluation_c,
        'primitive_count': str(primitives.count),
        'primitive_decls': primitives.decls,
        'primitive_implementations': primitives.impls,
        'primitive_word_definitions': primitives.word_defs,
        'thread_step': thread_step_c,
    }

    evaluator_h = fill_template(evaluator_h_tmpl, h_values)
    evaluator_c = fill_template(evaluator_c_tmpl, c_values)

    base_path = Path(args.target_dir) / args.base_name

    h_path = base_path.with_suffix('.h')
    c_path = base_path.with_suffix('.c')

    print(reformat(evaluator_h), file=open(h_path, 'w'))
    print(reformat(evaluator_c), file=open(c_path, 'w'))

def coalesce_generate_params(args, env):

    raw_address_model     = args.address_model     or env.address_model
    raw_concurrency_model = args.concurrency_model or env.concurrency_model
    raw_execution_model   = args.execution_model   or env.execution_model
    raw_thread_model      = args.thread_model      or env.thread_model

    address_model     = std_address_model[raw_address_model]
    concurrency_model = std_concurrency_model[raw_concurrency_model]
    execution_model   = std_execution_model[raw_execution_model]
    thread_model      = std_thread_model[raw_thread_model]

    definitions    = env.definitions    + args.definitions
    primitives     = env.primitives     + args.primitives
    compiled_words = env.compiled_words + args.compiled_words
    library_words  = env.library_words  + args.library_words

    return GenParams(address_model, concurrency_model, execution_model, thread_model,
                     definitions, primitives, compiled_words, library_words,
                     args.base_name, args.target_dir)

def load_error_data():

    lines = read(templates / 'errors.md').split('\n')

    data_lines = [l for l in lines if l.startswith('    ')]

    return [ErrorData(*re.split(' +', l.strip(), 2)) for l in data_lines]

def error_code_definitions(error_data):

    return '\n'.join([f'{e.symbol} = {e.id},' for e in error_data])

def error_descriptors(error_data):

    return ',\n'.join([
        f'''{{{e.symbol}, "{e.symbol}", "{e.desc}"}}'''
        for e in error_data
    ])

def process_definitions(definition_paths):

    return '\n'.join(
        open(path).read()
        for path in definition_paths
    )

def process_primitives(primitive_paths, execution_model, thread_model):

    primitives = [
        parse_primitive(path)
        for path in primitive_paths
    ]

    primitive_decl_tmpl = try_read(execution / execution_model / 'primitive_decl.c')

    if primitive_decl_tmpl:

        decls = '\n'.join([
            fill_template(primitive_decl_tmpl, {'label': p.label})
            for p in primitives
        ])

    else:
        decls = ''

    primitive_impl_tmpl = read(execution / execution_model / 'primitive_impl.c')

    impls = '\n' + '\n'.join([
        fill_template(
            primitive_impl_tmpl,
            {
                'label':         p.label,
                'block_comment': p.block_comment or '',
                'body':          p.body
            }
        )
        for p in primitives
    ])

    register_primitive_tmpl = read(templates / 'register_primitive.c')

    registry = '\n'.join([
        fill_template(register_primitive_tmpl, {'label': p.label})
        for p in primitives
    ])

    primitive_word_def_tmpl = read(threading / thread_model / 'primitive_word_def.c')

    word_defs = '\n'.join([
        fill_template(
            primitive_word_def_tmpl,
            {
                'label':     p.label,
                'word_name': f'"{escape_for_c_string(p.word_name)}"',
                'flags':     'c_immediate' if p.is_immediate else '0',
            }
        )
        for p in primitives
        if p.word_name
    ])

    compiled_primitive_word_decl_tmpl  = read(templates / 'compiled_primitive_word_decl.h')

    cw_decls ='\n'.join([
        fill_template(compiled_primitive_word_decl_tmpl, { 'label': p.label })
        for p in primitives
    ])

    return Primitives(len(primitives), decls, impls, registry, word_defs, cw_decls)

primitive_re_text = r'\s*'.join([        # join all parts below with whitespace
    '',                                  # match whitespace at the beginning
    r'(?P<block_comment>/\*([^*]|\*[^/])*\*/)?',
    '(?://',                             # begin non-capturing group, discards //, whitespace, etcj
    r'(?P<word_name>[^\s]+)',            # FORTH word name, whitespace delimited
    '(?P<immediate_flag>immediate)?',    # optional "immediate"
    ')?',                                # closes non-capturing group, entire line is optional
    '(?P<label>[_a-zA-Z][_a-zA-Z0-9]*)', # std C identifier
    ':',                                 # keeps primitive roughly C syntax compliant
    r'(?P<body>\{.*\})',                 # the actual implementation
    '$'                                  # ensure only whitespace after closing brace
])

# DOTALL allows body and whitespace matches to include newlines.
primitive_re = re.compile(primitive_re_text, re.DOTALL)

def parse_primitive(path):

    text = open(path).read()

    m = re.match(primitive_re, text)

    if not m:
        print(f'unable to parse primitive: {path}', file=sys.stderr)
        exit(1)

    return Primitive(m.group('word_name'),
                     m.group('immediate_flag') is not None,
                     m.group('label'),
                     m.group('block_comment'),
                     m.group('body'))

def process_compiled_words(compiled_word_paths):

    compiled_words = [
        parse_compiled_word(path)
        for path in compiled_word_paths or []
    ]

    register_compiled_word_tmpl = read(templates / 'register_compiled_word.c')

    registry = '\n'.join([
        fill_template(register_compiled_word_tmpl, {'label': cw.label})
        for cw in compiled_words
    ])

    compiled_word_def_tmpl = read(templates / 'compiled_word_def.c')

    word_defs = '\n'.join([
        fill_template(
            compiled_word_def_tmpl,
            {
                'label': cw.label,
                'word_name': f'"{escape_for_c_string(cw.word_name)}"',
                'flags': 'c_immediate' if cw.is_immediate else '0',
                'body': cw.body,
            })
        for cw in compiled_words
        if cw.word_name
    ])

    compiled_word_decl_tmpl  = read(templates / 'compiled_word_decl.h')

    cw_decls ='\n'.join([
        fill_template(compiled_word_decl_tmpl, { 'label': cw.label })
        for cw in compiled_words
    ])

    return CompiledWords(len(compiled_words), registry, word_defs, cw_decls)

compiled_word_re_text = r'\s*'.join([    # join all parts below with whitespace
    '',                                  # match whitespace at the beginning
    r'(?P<block_comment>/\*([^*]|\*[^/])*\*/)?',
    '(?://',                             # begin non-capturing group, discards //, whitespace, etc
    r'(?P<word_name>[^\s]+)',            # FORTH word name, whitespace delimited
    '(?P<immediate_flag>immediate)?',    # optional "immediate"
    ')?',                                # closes non-capturing group, entire line is optional
    '(?P<label>[_a-zA-Z][_a-zA-Z0-9]*)', # std C identifier
    ':',                                 # keeps compiled_word roughly C syntax compliant
    r'(?P<body>\{.*\})',                 # the actual implementation
    '$'                                  # ensure only whitespace after closing brace
])

# DOTALL allows body and whitespace matches to include newlines.
compiled_word_re = re.compile(compiled_word_re_text, re.DOTALL)

def parse_compiled_word(path):

    text = open(path).read()

    m = re.match(compiled_word_re, text)

    if not m:
        print(f'unable to parse compiled_word: {path}', file=sys.stderr)
        exit(1)

    return CompiledWord(m.group('word_name'),
                        m.group('immediate_flag') is not None,
                        m.group('label'),
                        m.group('block_comment'),
                        m.group('body'))

def process_library_words(library_word_paths):

    lines = [
        line.rstrip().replace('\\', '\\\\').replace('"', '\\"')
        for path in library_word_paths or []
        for line in open(path).readlines()
    ]

    return LibraryWords(len(lines), ',\n'.join([f'"{line}"' for line in lines]))

def read(path):
    return path.open().read()

def try_read(path):

    try:
        return read(path)
    except:
        return ''

def escape_for_c_string(v: str) -> str:
    escapes = {
        '\\': '\\\\',
        '"': '\\"',
        '\n': '\\n',
        '\r': '\\r',
        '\t': '\\t',
        '\b': '\\b',
        '\f': '\\f',
        '\v': '\\v',
        '\a': '\\a',
        '\0': '\\0'
    }
    return ''.join(escapes.get(c, c) if c >= ' ' else f'\\x{ord(c):02x}' for c in v)

def fill_template(tmpl, values):

    prior_result = ''
    result = tmpl

    while len(prior_result) != len(result):

        prior_result = result

        for k, v in values.items():

            pattern = '/*{ ' + k + ' }*/'
            result = result.replace(pattern, v)

    return result

def reformat(c_text):

    indent_cmd = 'indent --no-tabs -psl -kr -l128'.split()
    format_c_cmd = [
        str(Path(__file__).parent / 'format_c'),
        'C'
    ]

    p = subprocess.run(indent_cmd, input=c_text, text=True, capture_output=True)

    if p.returncode:
        print(p.stderr)
        exit(p.returncode)

    p = subprocess.run(format_c_cmd, input=p.stdout, text=True, capture_output=True)

    if p.returncode:
        print(p.stderr)
        exit(p.returncode)

    return p.stdout

def cmd_build(args, env):

    target_dir = args.target_dir
    source_dir = args.source_dir
    base_name = args.base_name
    cell_type = args.cell_type
    double_type = args.double_type

    source_path = (Path(source_dir) / base_name).with_suffix('.c')

    target_base_name = base_name

    target_path = (Path(target_dir) / target_base_name).with_suffix('.o')

    compile_cmd = [
        'gcc',
        '-D', f'CELL_TYPE={cell_type}',
        '-D', f'DOUBLE_TYPE={double_type}',
        '-c',
        '-o', str(target_path),
        str(source_path)
    ]

    p = subprocess.run(compile_cmd)
    p.check_returncode()

    target_base_name = f'bootstrap_{base_name}'

    target_path = (Path(target_dir) / target_base_name).with_suffix('.o')

    compile_cmd = [
        'gcc',
        '-D', f'CELL_TYPE={cell_type}',
        '-D', f'DOUBLE_TYPE={double_type}',
        '-c',
        '-o', str(target_path),
        str(source_path)
    ]


if __name__ == '__main__':
    main()
