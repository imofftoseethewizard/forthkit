
module definition
  a unit of primitives, forth words, and data which provides....
  ideally defined by an rc or m4 file
  ideally

testing
  missing tests
    <# # hold #s #>

f83
  colon semantics vs f79: add new word to dictionary only at ';', not initially

refactor
  decompile.fs to isolate f79-specific core

debugger
  ( f79 )
  : debug' 32 word find ?dup if debug else ... then ;
  ( f83 )
  : debug' 32 word find if debug else ... then ;
  \b (break)
  \bt backtrace
  bp
  \.s
  convenience forms for debug fiber's stack

order of generalization
  forth versions
    standards
      94 (ANS forth), current standard, (check gforth compat works)

  modules
    contains ops, primitives, compiled, tests for a unit of functionality
    eg one each for the standard word sets, posix file handling or optargs, etc

  forth variants
    wihtout fibers
    indirect word references
    no bounds checking
    strict case matching

  compilers
    tinycc
    msvc

  os/arch
    rpi -- have one
    macos -- qemu
    arduino -- have one
    pic?
    beaglebone

order of features
  move contents of compiled/*.m4 (c files) to lib *.fs

  primitive reduction (f0 effort/after image loading)
    move base, state to dictionary from task
    move current, forth, interpret to evaluator from task
    remove primitives base, state, tbase, tcurrent, tinterpret, tstate

    base
      dot num convert u_dot decimal to_number

    state
      _abort left_bracket quit dot_quote colon semicolon right_bracket
      tick_f79 interpret

  tasks
    tests for fiber.fs

  use aux task to implement compile-execute interpreter
    enables control structures in "interpret" mode
    would this eliminate state?
    how would [ ] be handled?

  garbage collector

  image load 2

image load (part 2)
  image format. array of cells
    first 8 bytes "Forthkit"
    first 32 bytes reserved.
    32nd byte is the cell size
    following the first 32:
    evaluator image
    0 size of image
    1 size of evaluator
    2,3 offset to/number of relocated addresses
    4,5 offset to/number of primitive addresses
    6,7 offset to/number of data blocks
    8,9 offset to/number of metadata blocks
    each data block
      length, offset (from evaluator base)
    each metadata block
      length tag data
    header length: 32 bytes + 10 * cell size

  add metadata to image

  rerog bootstrapped- vs bare- vs <> in Makefile to use directories
  reorg interpreter code to support separate c files for bootstrapped vs bare/bundled

  interface
    cli
      check that image is compatible
      checks for incompatible flags
      check that build either has bootstrap code or an image file

  improvements

    move parameter, return stacks from fiber/task to independent reserved areas

    identify and encode references to addresses given by reserve
      enable loading to a larger/smaller total memory size.

order of expanded testing
  new features
  failures of std words
  output of std words
  file system side-effects of standard words (i.e. block words)
  variants and versions

decompiler (future work)
  guess counted strings
  recognize word headers, show flags, dictionary link
  if n is 0, then decompile until all branches have reached an exit

warn on state = 1 at end of line while interpreting?
  gforth prints "compiled" instead of "ok"

warn on semicolon where unfinished control structure
  eg : foo 1 if 2 else 3 ;

test system
  tooling
    make, shell scripts, files

  review standard test suite for output, failure, and storage tests

  types of tests
    i. standard tests based on internally observed values
      `t{  0  0 * ->  0 }t`

    ii. tests of output
      evaluating `1 .` prints "1 "

    iii. test of failures
      evaluating `.` returns err_parameter_stack_underflow

    iv. tests of storage
      ... example tbd

core fiber test suite
    f@ ( n -- f )
    fip ( f -- addr )
    frp ( f -- addr )
    >frp ( x f -- )
    frp> ( f -- x )
    frp0 ( f -- addr )
    frph ( f -- addr )
    fsteps ( f -- addr )
    there
    tsp
    tsp0
    >tsp
    tsp>

stack margins for overflow/underflow detection

fiber migration
  objective
    support debugger
    support step-based round-robin multi-fiber threads
    support "async" model ala js, Python

  1. execute a word in a separate fiber, same task
    a. allocate and initialize a fiber
      : ?? ( xt -- f )
        fiber dup >r
        0 r@ >f-rp
        r@ f-ip !
        r>
      ;
    b. push onto fiber stack
      xt fiber start
    c. demonstrate that it ran on a separate return stack
    d. end/clean up

  2. step through a word in a separate fiber
    a. set f-steps to 1 for each step
    b. display ip each step.

  3. execute a word in a separate fiber, new task
    a. allocate and initialize task
    b. proceed as in item 1.

  order
    indirection for task
    interpreter task
    fiber/task primitives/words/tests

  indirection for task attributes
  identify/define task/fiber words
    fiber ( xt -- f ) gets next empty fiber
      initialize ip = xt, rp, rp0 in fiber
    snip ( -- ) f1 f0 -> f0 (clear f1)
    lay ( f -- )
    twist ( -- ) f1 f0 -> f0 f1
    braid ( n -- ) ; fn ... f1 f0 --> f1 ... fn f0
    end ( -- ) ; f1 f0 -> f1 (clear f0)
    start (f -- ) ; f0 -> f0 f
    #f ( -- n )
    f@ ( n -- f )
    fip ( f -- addr )
    frp ( f -- addr )
    >frp ( x f -- )
    frp> ( f -- x )
    frp0 ( f -- addr )
    frph ( f -- addr )
    fsteps ( f -- addr )
    there
    tsp
    tsp0
    >tsp
    tsp>
    tclone
    tfork

types of concurrency
  - f0: ip/rp/rp_stop/step -- useful for debugging, profiling
  - f1: ip/rp/rp_stop/sp/step -- some types of concurrency -- coop or step-based -- limited
      dict changes
  - f2: full state, same address space -- full dict changes, sync primitives,
      e[...] will need abstraction
  - t0: full state, same address space with processor threads -- stdlib thread prims,
      full dict changes, sync primitives
      e[...] will need abstraction
  - t1: separate address space in same process, processor threads -- stdlib thread, sync prims,
  - m0: separate process, local -- POSIX mp primitives
  - m1: separate process, remote -- POSIX mp primitives, network

fiber
    ip
    rp
    rp0
    rp_stop
    steps
    taskp

task
  each task has a primary fiber
    bp
    dp
    sp
    sp0

  ip/rp/rp0/steps/rp_stop
  fiber (xt -- ) creates fiber, pushes to top of fiber stack
  twist ( -- )
    store ip/rp/rp0 in fiber on top of fiber stack,
    swap top of fiber stack,
    load ip/rp/rp0 from fiber on top of fiber stack

  braid ( n -- ) n > 0
    1 braid is a no-op
    2 braid swaps the second and third items in the fiber stack
    3 braid moves the 4th item to the 2nd position, and moves the 2nd and 3rd each
      down one spot
  join
    drop top of fiber stack
    load ip/rp/rp0 from fiber on top of fiber stack

thread
  context
    fp/fp0
    ip
    rp/rp0/rp_stop
    sp/sp0
    steps


  current context
    on switch/push/pop copy regs into current context

  switch ( ctx -- ) switch context, set regs into current, set current to ctx, read regs


tools
  rationale: ubiquitious and lightweight
  a c compiler: bcc, clang, gcc, icc, pcc, tcc
  m4
  make
  sh
  grep
  find
  indent

1. discover which optimizations cause failures in absolute addressing
   individually and pairwise for individual optimizations,
   no segfaults/bus errors, but -O1 still fails
4. interpreter structure test harness
    f0
    itemize functional pieces by execution model
      primitive declaration
        threaded: none
        subroutine: local function declaration
        switch: none
      primitive implementations
        threading: labeled block
        subroutine: local function
        switch: case block
      primitive definition in dictionary
      compiled word definition
      _next
      dispatch loop
        threaded: none
        subroutine: after local fn decls
        switch: around prim impl

    single cli command to
      compile all allowable address/threading combinations
      exercise all state transitions

    dimensions
      word size: 16, 32, 64
      compilation target: 32, 64
      address mode: absolute, relative
      reference model: direct, indirect
      dispatch model: switched, subroutine, threaded
    allowable region:
      absolute address => word size = compilation target
      word size <= compilation target
    combinations
      absolute addressing: 12 (compilation target * reference model * dispatch model)
      relative addressing:
        word size 16: 12 (compilation target * reference model * dispatch model)
        word size 32: 12 (compilation target * reference model * dispatch model)
        word size 64: 6 (reference model * dispatch model)
      total: 42

    operators
      abort
      branch
      do
      does
      exit
      jump
      literal
      loop
      n-loop
      (execute)

    _is_primitive -- true if cell represents a primitive
    _pr_deref     -- cell to (void *), referring to the implementation of a primitive
    _from_ptr     -- translates a (cell *) to a cell, inverse of _to_ptr
    _to_ptr       -- translates a cell which references another to (cell *), inverse of _from_ptr

5. indirect threading
8. multi-threading
9. local multi-process
10. indirect primitives for 2 byte word size, or translate more primitives to compiled
14. other compilers: bcc, tcc, pcc, icc
14.
    test suite
      double number words

    selected (all?) items from reference word set

12. f94
13. f2012
12. investigate Joy and HVM.
15. posix signal handling

wrappers
  posix
    ...
  sqlite
  blas

16. replicate some tools from coreutils (yes, wc, ls, etc)
  develop "modules" that can be easily included in an interpreter
    eg, getopt
    enable one-liner to have primitives/words to use getopt
    in spec,
      for m in $modules; do . $m; done
    extends bundled words, primitives
  sequence of steps to final product
    1. develop with bundled interpreter with threads and debugging
    2. create any modules that don't exist yet
    3. implement tool, including any new primitives
    4. implement unit tests in forth
    5. create bundled version which auto-runs
    6. implement integration tests without dependence on forth interpreter
    7. change interpreter to remove fiber support, debugging
    8. remove unused words, primitives, including interpreter
    9. reduce dictionary, removing word names, links, flags, ie leave only code, variables
