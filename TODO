fiber migration
  order
    indirection for task
    interpreter task
    fiber/task primitives/words/tests
    fiber in eval loop?

  think about how to define/describe fiber/task/word structures
  indirection for task attributes
  identify/define task/fiber words
    snip ( -- ) f1 f0 -> f0
    twist ( -- ) f1 f0 -> f0 f1
    braid ( n -- ) ; fn ... f1 f0 --> fn-1 ... f1 fn f0
    join ( -- ) ; f1 f0 -> f1
    start (f -- ) ; f0 -> f0 f
    #f ( -- n )
    f@ ( n -- f )
    f>ip ( f -- a )
    f>rp ( f -- a )
    f>rp0 ( f -- a )
    f>rp-stop ( f -- a )
    f>steps ( f -- n )
    f<ip!
    f<rp!
    f<rp0!



types of concurrency
  - f0: ip/rp/rp_stop/step -- useful for debugging, profiling
  - f1: ip/rp/rp_stop/sp/step -- some types of concurrency -- coop or step-based -- limited
      dict changes
  - f2: full state, same address space -- full dict changes, sync primitives,
      e[...] will need abstraction
  - t0: full state, same address space with processor threads -- stdlib thread prims,
      full dict changes, sync primitives
      e[...] will need abstraction
  - t1: separate address space in same process, processor threads -- stdlib thread, sync prims,
  - m0: separate process, local -- POSIX mp primitives
  - m1: separate process, remote -- POSIX mp primitives, network

fiber
    ip
    rp
    rp0
    rp_stop
    steps
    taskp

task
  each task has a primary fiber
    bp
    dp
    sp
    sp0

  ip/rp/rp0/steps/rp_stop
  fiber (xt -- ) creates fiber, pushes to top of fiber stack
  twist ( -- )
    store ip/rp/rp0 in fiber on top of fiber stack,
    swap top of fiber stack,
    load ip/rp/rp0 from fiber on top of fiber stack

  braid ( n -- ) n > 0
    1 braid is a no-op
    2 braid swaps the second and third items in the fiber stack
    3 braid moves the 4th item to the 2nd position, and moves the 2nd and 3rd each
      down one spot
  join
    drop top of fiber stack
    load ip/rp/rp0 from fiber on top of fiber stack

debugging use of fiber

  debug evaluator changes
    implement step, next, out
    on break, set run, debug-fiber twist

  xt debug -- sets up a fiber
  ss --  <set single step> _twist

thread
  context
    fp/fp0
    ip
    rp/rp0/rp_stop
    sp/sp0
    steps


  current context
    on switch/push/pop copy regs into current context

  switch ( ctx -- ) switch context, set regs into current, set current to ctx, read regs


debugging
  requires debug build
    before prim check
      check for breakpoint
      check for steps == 0 (ss/ms)
      check for ip == <> (nx)
      check for rp == <> (so)
    check


  <xt> debug.. sets up a debug context
  stack of stacks (say 4 stacks of 64 cells each) impl dependent parameters

  : debug' 32 word find ?dup if debug else ... then ;
  \s (single step)
  \o (step out)
  \w (next word)
  n \m (multistep)
  \r (run)
  \b (break)
  \bt backtrace
  bp

  debug context:
    ip
    rp
    <space for rp>
    break points

  breakpoint

naming convention for executables
  <f79|f83|f94|f-ansi|f12|f-std>-<cell bits>-<length bits>-<thr(eaded)|sw(itched)|sub(routine)>-<r(elocatable)|a(bsolute)>
  eg
    f79-32-16-thr-r:
      * FORTH-79
      * 32 bit cells
      * 16 bit lengths (for counted strings)
      * threaded execution
      * relocatable image


tools
  rationale: ubiquitious and lightweight
  a c compiler: bcc, clang, gcc, icc, pcc, tcc
  m4
  make
  sh

1. discover which optimizations cause failures in absolute addressing
   individually and pairwise for individual optimizations,
   no segfaults/bus errors, but -O1 still fails
4. interpreter structure test harness
    f0
    itemize functional pieces by execution model
      primitive declaration
        threaded: none
        subroutine: local function declaration
        switch: none
      primitive implementations
        threading: labeled block
        subroutine: local function
        switch: case block
      primitive definition in dictionary
      compiled word definition
      _next
      dispatch loop
        threaded: none
        subroutine: after local fn decls
        switch: around prim impl

    single cli command to
      compile all allowable address/threading combinations
      exercise all state transitions

    dimensions
      word size: 16, 32, 64
      compilation target: 32, 64
      address mode: absolute, relative
      reference model: direct, indirect
      dispatch model: switched, subroutine, threaded
    allowable region:
      absolute address => word size = compilation target
      word size <= compilation target
    combinations
      absolute addressing: 12 (compilation target * reference model * dispatch model)
      relative addressing:
        word size 16: 12 (compilation target * reference model * dispatch model)
        word size 32: 12 (compilation target * reference model * dispatch model)
        word size 64: 6 (reference model * dispatch model)
      total: 42

    operators
      abort
      branch
      do
      does
      exit
      jump
      literal
      loop
      n-loop
      (execute)

    _is_primitive -- true if cell represents a primitive
    _pr_deref     -- cell to (void *), referring to the implementation of a primitive
    _from_ptr     -- translates a (cell *) to a cell, inverse of _to_ptr
    _to_ptr       -- translates a cell which references another to (cell *), inverse of _from_ptr

5. indirect threading
7. load/save relocatable images
8. multi-threading
9. local multi-process
10. indirect primitives for 2 byte word size, or translate more primitives to compiled
11. token-based dispatch (ie, op_X and pr_X are mapped to/from enum)
    might be necessary if compiled code for relocatable 16-bit forth > 32kb.
14. other compilers: clang, bcc, tcc, pcc, icc
14.
    consistency checks (config option)
    test suite
      double number words

    selected (all?) items from reference word set
    reorg test suite

11. f83
12. f94
13. f2012
12. investigate Joy and HVM.